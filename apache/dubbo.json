{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2021-10-12T11:59:56.357926Z",
      "credit": [
        "Marcono1234"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data via the `writeReplace()` method in internal classes, which may lead to DoS attacks.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.google.code.gson:gson` to version 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/google/gson/pull/1991/commits)\n- [GitHub PR](https://github.com/google/gson/pull/1991)\n",
      "disclosureTime": "2021-10-11T16:57:22Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.8.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMGOOGLECODEGSON-1730327",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "gson",
        "groupId": "com.google.code.gson"
      },
      "modificationTime": "2021-11-02T17:41:17.320259Z",
      "moduleName": "com.google.code.gson:gson",
      "packageManager": "maven",
      "packageName": "com.google.code.gson:gson",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-02T17:41:17.473733Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/google/gson/pull/1991/commits"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/google/gson/pull/1991"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.9)"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "from": [
        "org.apache.dubbo:dubbo-build-tools@1.0.0",
        "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
        "org.apache.dubbo:dubbo@3.0.5-SNAPSHOT",
        "com.google.code.gson:gson@2.8.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.google.code.gson:gson",
      "version": "2.8.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P/RL:O",
      "alternativeIds": [],
      "creationTime": "2020-10-02T14:16:13.342479Z",
      "credit": [
        "Jonathan Leitschuh"
      ],
      "cvssScore": 5.5,
      "description": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Information Disclosure. The file permissions on the file created by `com.google.common.io.Files.createTempDir` allows an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n### PoC\r\n```\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, it is recommend choosing a temporary directory API provided by Android, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n## Remediation\nUpgrade `com.google.guava:guava` to version 30.0-android, 30.0-jre or higher.\n## References\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n",
      "disclosureTime": "2020-10-02T04:56:54Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "30.0-android",
        "30.0-jre"
      ],
      "functions": [
        {
          "functionId": {
            "className": "Files",
            "filePath": "com/google/common/io/Files.java",
            "functionName": "createTempDir"
          },
          "version": [
            "[,30.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.google.common.io.Files",
            "functionName": "createTempDir"
          },
          "version": [
            "[,30.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
      "identifiers": {
        "CVE": [
          "CVE-2020-8908"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "guava",
        "groupId": "com.google.guava"
      },
      "modificationTime": "2020-11-05T10:11:21.061172Z",
      "moduleName": "com.google.guava:guava",
      "packageManager": "maven",
      "packageName": "com.google.guava:guava",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-10-23T15:50:35Z",
      "references": [
        {
          "title": "GHSA Advisory",
          "url": "https://github.com/advisories/GHSA-5mg8-w23w-74h3"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/google/guava/issues/4011"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 30.0-android)",
          "(30.0-android, 30.0-jre)"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "socialTrendAlert": false,
      "title": "Information Disclosure",
      "from": [
        "org.apache.dubbo:dubbo-build-tools@1.0.0",
        "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
        "org.apache.maven:maven-core@3.5.4",
        "com.google.guava:guava@20.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.google.guava:guava",
      "version": "20.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2018-04-25T07:28:15.755000Z",
      "credit": [
        "Apostolos Giannakidis"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1-android, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
      "disclosureTime": "2018-04-25T07:28:15Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "24.1.1-android",
        "24.1.1-jre"
      ],
      "functions": [
        {
          "functionId": {
            "className": "AtomicDoubleArray",
            "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
            "functionName": "readObject"
          },
          "version": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.google.common.util.concurrent.AtomicDoubleArray",
            "functionName": "readObject"
          },
          "version": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
      "identifiers": {
        "CVE": [
          "CVE-2018-10237"
        ],
        "CWE": [
          "CWE-119"
        ],
        "GHSA": [
          "GHSA-mvr2-9pj6-7w5j"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "guava",
        "groupId": "com.google.guava"
      },
      "modificationTime": "2020-06-12T14:37:04.235662Z",
      "moduleName": "com.google.guava:guava",
      "packageManager": "maven",
      "packageName": "com.google.guava:guava",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-02T13:38:04Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
        },
        {
          "title": "Google Group Forum",
          "url": "https://groups.google.com/forum/%23%21topic/guava-announce/xqWALw4W1vs/discussion"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
        }
      ],
      "semver": {
        "vulnerable": [
          "[11.0, 24.1.1-android)",
          "(24.1.1-android, 24.1.1-jre)"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "from": [
        "org.apache.dubbo:dubbo-build-tools@1.0.0",
        "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
        "org.apache.maven:maven-core@3.5.4",
        "com.google.guava:guava@20.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.google.guava:guava",
      "version": "20.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F",
      "alternativeIds": [],
      "creationTime": "2021-04-27T10:51:05.462338Z",
      "credit": [
        "Lukas Euler"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[commons-io:commons-io](https://search.maven.org/artifact/commons-io/commons-io) is a The Apache Commons IO library contains utility classes, stream implementations, file filters, file comparators, endian transformation classes, and much more.\n\nAffected versions of this package are vulnerable to Directory Traversal via calling the method FileNameUtils.normalize using an improper string like `//../foo` or `\\\\..\\foo`, which may allow access to files in the parent directory.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `commons-io:commons-io` to version 2.7 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/commons-io/commit/fe7543eee5cd4b2f9e78aa44c31031b68eba204d)\n- [Jira Issue](https://issues.apache.org/jira/browse/IO-556)\n- [PoC](https://github.com/AlAIAL90/CVE-2021-29425)\n",
      "disclosureTime": "2021-04-26T16:04:00Z",
      "exploit": "Functional",
      "fixedIn": [
        "2.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMMONSIO-1277109",
      "identifiers": {
        "CVE": [
          "CVE-2021-29425"
        ],
        "CWE": [
          "CWE-20",
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-gwrp-pvrq-jmwv"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "commons-io",
        "groupId": "commons-io"
      },
      "modificationTime": "2021-04-27T14:26:12.193344Z",
      "moduleName": "commons-io:commons-io",
      "packageManager": "maven",
      "packageName": "commons-io:commons-io",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-04-27T14:26:12Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/commons-io/commit/fe7543eee5cd4b2f9e78aa44c31031b68eba204d"
        },
        {
          "title": "Jira Issue",
          "url": "https://issues.apache.org/jira/browse/IO-556"
        },
        {
          "title": "PoC",
          "url": "https://github.com/AlAIAL90/CVE-2021-29425"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0, 2.7)"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "from": [
        "org.apache.dubbo:dubbo-build-tools@1.0.0",
        "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
        "commons-io:commons-io@2.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "commons-io:commons-io",
      "version": "2.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-05-29T08:50:11.153150Z",
      "credit": [
        "Charles Duffy"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[org.apache.maven.shared:maven-shared-utils](https://maven.apache.org/shared/maven-shared-utils/) is a functional replacement for plexus-utils in Maven.\n\nAffected versions of this package are vulnerable to Command Injection. The `Commandline` class can emit double-quoted strings without proper escaping, allowing shell injection attacks. The `BourneShell` class should unconditionally single-quote emitted strings (including the name of the command itself being quoted), with `{{'\"'\"'}}` used for embedded single quotes, for maximum safety across shells implementing a superset of POSIX quoting rules. \r\n\r\nThis is a similar issue to [`SNYK-JAVA-ORGCODEHAUSPLEXUS-31522`](https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31522)\n## Remediation\nUpgrade `org.apache.maven.shared:maven-shared-utils` to version 3.3.3 or higher.\n## References\n- [Apache Jira Issue](https://issues.apache.org/jira/browse/MSHARED-297)\n- [GitHub PR](https://github.com/apache/maven-shared-utils/pull/40/files)\n",
      "disclosureTime": "2020-05-29T08:43:40Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.3.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHEMAVENSHARED-570592",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-77"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "maven-shared-utils",
        "groupId": "org.apache.maven.shared"
      },
      "modificationTime": "2020-08-05T13:31:08.299214Z",
      "moduleName": "org.apache.maven.shared:maven-shared-utils",
      "packageManager": "maven",
      "packageName": "org.apache.maven.shared:maven-shared-utils",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-22T17:01:48Z",
      "references": [
        {
          "title": "Apache Jira Issue",
          "url": "https://issues.apache.org/jira/browse/MSHARED-297"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apache/maven-shared-utils/pull/40/files"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,3.3.3)"
        ]
      },
      "severity": "critical",
      "severityWithCritical": "critical",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "from": [
        "org.apache.dubbo:dubbo-build-tools@1.0.0",
        "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
        "org.apache.maven:maven-core@3.5.4",
        "org.apache.maven.shared:maven-shared-utils@3.2.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.apache.maven.shared:maven-shared-utils",
      "version": "3.2.1"
    }
  ],
  "ok": false,
  "dependencyCount": 46,
  "org": "hacker.7.2018",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "maven",
  "ignoreSettings": null,
  "summary": "5 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2021-10-12T11:59:56.357926Z",
        "credit": [
          "Marcono1234"
        ],
        "cvssScore": 7.7,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data via the `writeReplace()` method in internal classes, which may lead to DoS attacks.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.google.code.gson:gson` to version 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/google/gson/pull/1991/commits)\n- [GitHub PR](https://github.com/google/gson/pull/1991)\n",
        "disclosureTime": "2021-10-11T16:57:22Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.8.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGSON-1730327",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "gson",
          "groupId": "com.google.code.gson"
        },
        "modificationTime": "2021-11-02T17:41:17.320259Z",
        "moduleName": "com.google.code.gson:gson",
        "packageManager": "maven",
        "packageName": "com.google.code.gson:gson",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-11-02T17:41:17.473733Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/gson/pull/1991/commits"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/google/gson/pull/1991"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.9)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "from": [
          "org.apache.dubbo:dubbo-build-tools@1.0.0",
          "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
          "org.apache.dubbo:dubbo@3.0.5-SNAPSHOT",
          "com.google.code.gson:gson@2.8.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "com.google.code.gson:gson",
        "version": "2.8.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P/RL:O",
        "alternativeIds": [],
        "creationTime": "2020-10-02T14:16:13.342479Z",
        "credit": [
          "Jonathan Leitschuh"
        ],
        "cvssScore": 5.5,
        "description": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Information Disclosure. The file permissions on the file created by `com.google.common.io.Files.createTempDir` allows an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n### PoC\r\n```\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, it is recommend choosing a temporary directory API provided by Android, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n## Remediation\nUpgrade `com.google.guava:guava` to version 30.0-android, 30.0-jre or higher.\n## References\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n",
        "disclosureTime": "2020-10-02T04:56:54Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "30.0-android",
          "30.0-jre"
        ],
        "functions": [
          {
            "functionId": {
              "className": "Files",
              "filePath": "com/google/common/io/Files.java",
              "functionName": "createTempDir"
            },
            "version": [
              "[,30.0)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.google.common.io.Files",
              "functionName": "createTempDir"
            },
            "version": [
              "[,30.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
        "identifiers": {
          "CVE": [
            "CVE-2020-8908"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "modificationTime": "2020-11-05T10:11:21.061172Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-10-23T15:50:35Z",
        "references": [
          {
            "title": "GHSA Advisory",
            "url": "https://github.com/advisories/GHSA-5mg8-w23w-74h3"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/google/guava/issues/4011"
          }
        ],
        "semver": {
          "vulnerable": [
            "[, 30.0-android)",
            "(30.0-android, 30.0-jre)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "socialTrendAlert": false,
        "title": "Information Disclosure",
        "from": [
          "org.apache.dubbo:dubbo-build-tools@1.0.0",
          "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
          "org.apache.maven:maven-core@3.5.4",
          "com.google.guava:guava@20.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "com.google.guava:guava",
        "version": "20.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1-android, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "24.1.1-android",
          "24.1.1-jre"
        ],
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.google.common.util.concurrent.AtomicDoubleArray",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ],
          "GHSA": [
            "GHSA-mvr2-9pj6-7w5j"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "modificationTime": "2020-06-12T14:37:04.235662Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/%23%21topic/guava-announce/xqWALw4W1vs/discussion"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "from": [
          "org.apache.dubbo:dubbo-build-tools@1.0.0",
          "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
          "org.apache.maven:maven-core@3.5.4",
          "com.google.guava:guava@20.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "com.google.guava:guava",
        "version": "20.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F",
        "alternativeIds": [],
        "creationTime": "2021-04-27T10:51:05.462338Z",
        "credit": [
          "Lukas Euler"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[commons-io:commons-io](https://search.maven.org/artifact/commons-io/commons-io) is a The Apache Commons IO library contains utility classes, stream implementations, file filters, file comparators, endian transformation classes, and much more.\n\nAffected versions of this package are vulnerable to Directory Traversal via calling the method FileNameUtils.normalize using an improper string like `//../foo` or `\\\\..\\foo`, which may allow access to files in the parent directory.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `commons-io:commons-io` to version 2.7 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/commons-io/commit/fe7543eee5cd4b2f9e78aa44c31031b68eba204d)\n- [Jira Issue](https://issues.apache.org/jira/browse/IO-556)\n- [PoC](https://github.com/AlAIAL90/CVE-2021-29425)\n",
        "disclosureTime": "2021-04-26T16:04:00Z",
        "exploit": "Functional",
        "fixedIn": [
          "2.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSIO-1277109",
        "identifiers": {
          "CVE": [
            "CVE-2021-29425"
          ],
          "CWE": [
            "CWE-20",
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-gwrp-pvrq-jmwv"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "commons-io",
          "groupId": "commons-io"
        },
        "modificationTime": "2021-04-27T14:26:12.193344Z",
        "moduleName": "commons-io:commons-io",
        "packageManager": "maven",
        "packageName": "commons-io:commons-io",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-04-27T14:26:12Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-io/commit/fe7543eee5cd4b2f9e78aa44c31031b68eba204d"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/IO-556"
          },
          {
            "title": "PoC",
            "url": "https://github.com/AlAIAL90/CVE-2021-29425"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0, 2.7)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "socialTrendAlert": false,
        "title": "Directory Traversal",
        "from": [
          "org.apache.dubbo:dubbo-build-tools@1.0.0",
          "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
          "commons-io:commons-io@2.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "commons-io:commons-io",
        "version": "2.6"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-05-29T08:50:11.153150Z",
        "credit": [
          "Charles Duffy"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[org.apache.maven.shared:maven-shared-utils](https://maven.apache.org/shared/maven-shared-utils/) is a functional replacement for plexus-utils in Maven.\n\nAffected versions of this package are vulnerable to Command Injection. The `Commandline` class can emit double-quoted strings without proper escaping, allowing shell injection attacks. The `BourneShell` class should unconditionally single-quote emitted strings (including the name of the command itself being quoted), with `{{'\"'\"'}}` used for embedded single quotes, for maximum safety across shells implementing a superset of POSIX quoting rules. \r\n\r\nThis is a similar issue to [`SNYK-JAVA-ORGCODEHAUSPLEXUS-31522`](https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31522)\n## Remediation\nUpgrade `org.apache.maven.shared:maven-shared-utils` to version 3.3.3 or higher.\n## References\n- [Apache Jira Issue](https://issues.apache.org/jira/browse/MSHARED-297)\n- [GitHub PR](https://github.com/apache/maven-shared-utils/pull/40/files)\n",
        "disclosureTime": "2020-05-29T08:43:40Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.3.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEMAVENSHARED-570592",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-77"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "maven-shared-utils",
          "groupId": "org.apache.maven.shared"
        },
        "modificationTime": "2020-08-05T13:31:08.299214Z",
        "moduleName": "org.apache.maven.shared:maven-shared-utils",
        "packageManager": "maven",
        "packageName": "org.apache.maven.shared:maven-shared-utils",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-22T17:01:48Z",
        "references": [
          {
            "title": "Apache Jira Issue",
            "url": "https://issues.apache.org/jira/browse/MSHARED-297"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/apache/maven-shared-utils/pull/40/files"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.3.3)"
          ]
        },
        "severity": "critical",
        "severityWithCritical": "critical",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "from": [
          "org.apache.dubbo:dubbo-build-tools@1.0.0",
          "org.apache.dubbo:dubbo-native-plugin@3.0.5-SNAPSHOT",
          "org.apache.maven:maven-core@3.5.4",
          "org.apache.maven.shared:maven-shared-utils@3.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "org.apache.maven.shared:maven-shared-utils",
        "version": "3.2.1"
      }
    ],
    "upgrade": {},
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 5,
  "projectName": "org.apache.dubbo:dubbo-build-tools",
  "foundProjectCount": 106,
  "displayTargetFile": "pom.xml",
  "path": "/Users/51pwn/MyWork/dubbo"
}
